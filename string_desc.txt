오버로딩(Overloading)
 - 한 클래스 내에서 동일한 이름의 메소드를 여럿 정의하는 것(구분되는 똑같은 이름 여러개)
 	메소드 호출시 각 메소드별로 구분이 가능하다면 동일한 이름으로 메소드들을 정의할 수 있음
 - 메소드의 ^매개변수의 자료형이나 개수가 다르면 같은 이름으로 정의해도 됨
 	예) test(), test(10), test(10.2), test(10,2), ...
	단, ^리턴타입이 다른걸로는 오버로딩이 안됨
 - ^생성자도 오버로딩이 가능함 : 여러가지 방법으로 해당 클래스의 인스턴스를 생성할 수 있음 <println 이놈도 메소드임 안에 괄호가 있으니까>

this 명령
 - 현재 생성되고 있는 인스턴스를 의미하는 키워드
 - this.변수명 : 해당 변수는 멤버변수라는 것을 의미(상수도 마찬가지)
 - this([매개변수(들)]) : 현재 실행되고 있는 생성자에서 오버로딩된 다른 생성자를 호출(생성자 안에서만 사용가능)

	
문자열(String)
 - 여러 문자들을 의미하는 자료형으로 자바에서는 String 클래스의 인스턴스로 표현됨
	그러므로 자바에서의 문자열을 String클래스의 인스턴스로 처리되며 String클래스의 멤버(변수, 상수, 메소드)들을 사용할 수 있음
 - String클래스는 java.lang 패키지에 들어있으며, java.lang 패키지는 따로 import를 하지 않아도 사용할 수 있음

 - 문법
String str = new String("문자열");	-> 정석적인 방법이나 사용하기 번거로워 실제로는 거의 사용하지 않음(귀찮다)
String str = "문자열";	-> 인스턴스이지만 변수처럼 생성할 수 있으며 문자열 클래스에서만 제공되는 방법

 - 생성자
String(String original) : 지정한 문자열(original)을 String 인스턴스로 생성하나 보통 직접 문자열을 넣어줌
String(StringBuffer buffer) : 지정한 StringBuffer 객체를 String 인스턴스로 생성하여 리턴
String(StringBuilder builder) : 지정한 StringBuilder 객체를 String 인스턴스로 생성하여 리턴

 - 주요 메소드 : 원본 문자열을 변경하는 메소드는 없음 int a
리턴타입	메소드명 및 설명
char	charAt(int index) : 문자열에서 지정한 인덱스에 해당하는 문자를 추출하여 리턴
int		compareTo(String anotherString) : 문자열과 지정한 다른 문자열이 같은지를 리턴(대소문자 구분하여 같으면 0)
int		compareToIgnoreCase(String str) : 문자열과 지정한 다른 문자열이 같은지를 리턴(대소문자 구분없이 같으면 0)
 - compareTo~ 를 사용해서 리턴값이 음수이면 원본이 비교대상보다 사전적으로 앞에 있고, 양수면 뒤에 있다는 의미
String	concat(String str) : 문자열의 뒤에 지정한 문자열 str을 붙여서 새로운 문자열로 리턴

boolean	endsWith(String suffix) : 문자열의 끝부분이 지정한 suffix와 같은지 여부를 리턴
boolean	equals(Object anObject) : 문자열과 지정한 문자열이 같은지를 리턴(대소문자 구분하여 같으면 true)
boolean	equalsIgnoreCase(String anotherString) : 문자열과 지정한 문자열이 같은지를 리턴(대소문자 구분없이 같으면 true)

indexOf() : 문자열에서 지정한 문자(열)의 위치(인덱스)를 찾아 리턴하는 메소드로 못 찾으면 -1을 리턴
int		indexOf(int ch) : 문자열에서 지정한 문자(ch)의 위치 인덱스를 리턴
int		indexOf(int ch, int fromIndex) : 지정한 문자(ch)를 fromIndex부터 찾아 리턴
int		indexOf(String str) : 문자열에서 지정한 문자열(str)의 위치 인덱스를 리턴
int		indexOf(String str, int fromIndex) : 지정한 문자열(str)을 fromIndex부터 찾아 리턴

lastIndexOf() : indexOf()와 비슷하나 찾는 방향을 문자열의 끝에서 부터 찾기 시작
int		lastIndexOf(int ch) : 문자열의 끝에서 부터 지정한 문자(ch)의 위치를 리턴
int		lastIndexOf(int ch, int fromIndex) : 지정한 문자(ch)의 위치를 fromIndex부터 반대로 찾아 리턴
int		lastIndexOf(String str) : 문자열의 끝에서 부터 지정한 문자열(str)의 위치를 리턴
int		lastIndexOf(String str, int fromIndex) : 지정한 문자열(str)의 위치를 fromIndex부터 반대로 찾아 리턴

boolean	isEmpty() : 문자열이 비어 있는지 여부를 리턴(빈 문자열 여부)
int		length() : 문자열의 길이로 글자 개수를 리턴(문자열의 마지막 인덱스 + 1의 값과 같음)

String	replace(char oldChar, char newChar) : 문자열에서 oldChar를 찾아 newChar로 변경 후 새 문자열로 리턴
String	replaceAll(String regex, String replacement) : regex를 찾아 replacement로 변경 후 새 문자열로 리턴

String[] split(String regex) : 문자열을 regex를 구분자로 하여 자른 후 문자열 배열로 리턴
boolean	startsWith(String prefix) : 문자열의 시작부분이 지정한 prefix와 같은지 여부를 리턴
String	substring(int beginIndex) : 문자열의 beginIndex 부터 끝까지 잘라내어 새 문자열로 리턴
String	substring(int beginIndex, int endIndex) : beginIndex 부터 endIndex - 1 까지 잘라내어 새 문자열로 리턴

String	toLowerCase() : 문자열의 모든 영문 대문자를 소문자로 변환하여 새 문자열로 리턴
String	toUpperCase() : 문자열의 모든 영문 소문자를 대문자로 변환하여 새 문자열로 리턴
String	trim() : 문자열의 양끝에 있는 공백을 제거한 후 새 문자열로 리턴(사용자가 입력하는 모든 데이터에서 사용)

String	static valueOf(모든 종류의 데이터) : 지정한 데이터를 문자열로 형변환하여 리턴
 - static이므로 인스턴스 생성없이 String.valueOf(데이터)로 사용할 수 있음
 - 보통 문자열로 변환할때에는 데이터 + ""으로 간편하게 빈 문자열을 더하는 식으로 사용하는 경우가 더 많음
 	단, 메모리 관리에 민감한 프로그램 작업시에는 valusOf() 메소드를 사용하는 것이 좋다.


StringBuffer & StringBuilder 클래스
 - 문자열 변경을 위한 클래스들로 쓰레드 사용여부에 따라 선택해서 사용하면 됨
 	문자열 변경 순서 : String 인스턴스를 StringBuilder형으로 인스턴스로 생성 -> 문자열 변경 -> 다시 String 인스턴스로 생성
 - 두 클래스는 메소드까지 동일하여 둘 중 아무 클래스나 사용해도 됨
	StringBuffer : jdk1.0에서 추가. 쓰레드 셰이프(thread safe)하여 쓰레드 사용시 사용됨
	StringBuilder : jdk1.5에서 추가. 쓰레드에서는 불안정하나 stringBuffer 보다 빠름

 - 생성자
StringBuffer(String str) : 지정한 문자열(str)을 StringBuffer 인스턴스로 생성
StringBuilder(String str) : 지정한 문자열(str)을 StringBuiler 인스턴스로 생성

 - 주요 메소드 : String클래스와 겹치는 메소드는 생략
리턴				메소드명 및 설명
StringBuilder	append(모든 종류의 데이터) : 지정한 데이터를 StringBuilder의 뒤에 추가
StringBuilder	delete(int start, int end) : start부터 end - 1 까지 삭제한 후  리턴
StringBuilder	deleteCharAt(int index) : index에 해당하는 문자 하나를 삭제한 후 리턴
void			ensureCapacity(int minimumCapacity) : StringBuilder의 최소 용량을 minimumCapacity로 변경
StringBuilder	insert(int offset, 모든 종류의 데이터) : offset의 위치에 지정한 데이터를 끼워넣기
StringBuilder	reverse() : 문자열의 순서를 반대로 출력
void			setCharAt(int index, char ch) : index의 위치에 있는 특정 문자를 지정한 문자 ch로 변경
void			trimToSize() : 여유 용량을 없애고 크기에 맞게 줄임
 - StringBuilder의 모든 메소드는 StringBuffer 클래스에도 동일한 이름과 리턴, 매개변수로 존재함


배열(Array)
 - 순차적으로 나열되는 동일한 데이터 타입의 집합
 - 같은 자료형의 데이터 여러 개를 한 번에 관리하기 위한 기억공간
 - 하나의 이름으로 여러 개의 데이터를 관리할 수 있음
 - 배열도 하나의 객체로 취급하며 인덱스 번호로 각 칸의 데이터에 접근할 수 있음
 - 배열에 들어가는 데이터는 기본 자료형 뿐만 아니라 일반 객체(인스턴스)도 저장됨
 - 크게 1차원 배열과 다차원 배열(주로 2차원) 배열로 나뉨
 - 장점 : 같은 종류의 여러 데이터를 관리하기 쉽다(인덱스 번호를 이용하면 루프를 돌릴 수 있음)
 - 단점 : 배열자체가 가지는 기능이 부실하며, 배열 생성시 반드시 배열의 크기(데이터가 저장될 칸의 개수)를 알아야 함 - 크기조절 불가

1차원 배열
 - 같은 종류의 데이터를 한 행이나 열로 나열하는 방식으로 가장 많이 사용되는 배열형식
 - 생성법
	자료형[] 배열명 = new 자료형[배열크기];
	예) int[] arrScore = new int[10];	// int형 데이터 10개를 저장할 수 있는 arrScore라는 배열 생성
	또는 자료형 배열명[] = new 자료형[배열크기];	// 이런 방식도 가능하나 대부분 첫번때 방식을 사용함
- 배열은 생성과 동시에 초기화 할 수도 있음
	자료형[] 배열명 = {값1, 값2, ... , 값n};

다차원 배열
 - 보통 2차원 배열까지만 사용함
 - 여러개의 1차원 배열을 모든 것을 2차원 배열이라고 함
 - 생성법
 	자료형[][] 배열명 = new 자료형[배열의 행수][배열의 열수];
	또는
	자료형 배열명[][] = new 자료형[배열의 행수][배열의 열수];
	또는
	자료형[] 배열명[] = new 자료형[배열의 행수][배열의 열수];
	의 세가지 방법이 있으나 거의 첫번째 방법을 사용함

- 2차원 배열도 생성과 동시에 초기화할 수도 있음
	자료형[][] 배열명 = {
		{값1, 값2, ... , 값n},
		{값1, 값2, ... , 값n},
		{값1, 값2, ... , 값n}
	};
 - 자바에서의 2차원 배열은 여러 개의 1차원 배열들을 합친 형태로 내부의 1차원 배열들이 동일한 크기가 아니어도 됨
	예) int[][] arr = {
			{1, 2},
			{4, 5, 6},
			{6, 7, 8, 9}
		};



StringTokenizer 클래스
 - java.util 패키지에 있는 클래스로 split()과 비슷하게 문자열을 여러 조각으로 나누어 작업 시키는 클래스
 - 단, split()과 다르게 배열이 아닌 StringTokenizer 인스턴스로서 사용하며, 구분자 사용에서 큰 차이를 보임
 - 생성자
StringTokenizer(String str) :str을 공백을 기준으로 쪼개어 StringTokenizer 인스턴스 생성
StringTokenizer(String str, String delim) : str을 delim을 기준으로 쪼개어 생성
StringTokenizer(String str, String delim, boolean returnDelims)
 : str을 delim을 기준으로 쪼개어 생성(returnDelims 값에 따라 구분자를 데이터에 포함(ture) 또는 미포함(false:기본값) 시킴)
 - 기본적으로 StringTokenizer는 구분자는 무조건 한 글자만 사용됨-여러 글자를 입력하면 각 글자들 모두 구분자로 사용됨

 - 주요 메소드
 리턴타입	메소드명 및 설명
int		countTokens() : 토큰(구분자를 기준으로 잘린 각각의 문자열) 개수를 리턴
boolean hasMoreElements() : 요소(토큰)이 더 있는지 여부를 리턴 - 반복문의 조건으로 사용됨
boolean hasMoreTikens() : 토큰이 더 있는지 여부를 리턴 - hasMoreElements()와 동일
Object	nextElement() : 다음 요소의 객체를 리턴
String	nextToken() : 다음 토큰의 문자열을 리턴




* 필기 노트 *

2022.01.06
// 클래스의 멤버를 가져다가 쓸라고 인스턴스 멤버(대부분 메소드)를 만드는거임
// 패키지는 그냥 폴더
// 멤버변수와 멤버상수를 통틀어서 필드라 한다.
// 클래스에서 제일먼저 인스턴스를 만들어야 한다.
// 생성자가 어떻게 생겨먹었는지 알아야 값을 집어넣는다 그러니 생성자부터 만든다
// 생성자(constr) 메소드(method) => ()가 있으면 메소드 아니면 생성자다
// API중 제일 먼저해야하는 첫번째 생성자를 보는거
// 인스턴스 만들때 new로 만든다
// 원래는 다 new 해야하지만 스트링클래스에서만 생략이 가능하다
// 인스턴스멤버는 생성되면서 주소값이 들어간다.
// 문자열을 변경하면 바뀐거처럼 보이나 메모리는 남아있음(쓰레기값 C1 = 데이터 > 주소값 변경 > C2 = 데이터)
// 매개변수의 이름이 중요하다 << 많이 하다보면 이름보고 알게됨
// 글자 관련해서 Case는 대부분 대소문자를 의미
// 메소드중에 String 들어간놈들은 다 새로 만들어서 리턴함
// 리턴타입이 boolean이면 저거 자체가 조건
// 동일한 문자판단에 equals를 많이 쓴다
// indexOf 어디 있냐 에도 쓰이지만 문자열이 존재하는지 찾을때도 많이 쓴다(-1만 아니면 일단 안에서 문자열이 존재)
// lastIndexOf 확장자 찾을때 많이 쓴다.
// "" 따옴표 안에 아무것도 없는걸 빈 문자열이라 한다.
// toLowerCase 로그인할때 대소문자 구분을 없애기 위해 많이 사용함
// trim 쓸데없이 쓰는 양 끝의 띄어쓰기를 날릴때 쓴다.
// 매개변수의 타입이 Object면 모든 종류의 데이터를 다 받을수 있다. valueOf를 쓸면 1 -> "1"
// 	int = 23;
	String s1 = i + "";
	스트링 스트링 - 이게 편하지만 메모리가 더 소모

	String s2 = String.valueOf(i);
	스트링 메소드

2022.01.07
// 선행에 필요한 조건을 미리 적어놔라
// 메소드를 만들어서 쓰면 장점은 유지보수가 편하다. 보기 좋다. 단점은 처리속도가 조금 걸린다.
// 검사를 할땐 틀린거 먼저 하는게 좋다.
// insert끼워넣기 하면 나머지 데이터가 뒤로 밀린다.
// Buffer Builder는 많이 바꿀때만 쓴다.
// 배열(Array) 같은 종류의 데이터끼리 묶어서 쓸수 있다.(따로 드냐 아님 봉투에 담아서 들고다니냐)
// [] <- 배열
// arr이라는 배열을 많이 쓴다.
// int i = 0 ; i < arrStr.length ; i++ 이걸 문법처럼 쓴다.

2022.01.10
// foreach가 헷갈리면 안써도 된다. 방식만 알고 있으면 됨
// import java.util.*; (*아스트리크는 곱셈 혹은 all을 의미)
// StringTokenizer 이미 쪼개져 있는 상태여서 :를 안넣는다
// returnDelims 값이 트루면 구분자(:)를 포함시킬수도 있다.






